#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio {
namespace testing {

struct contracts {
	static std::vector<uint8_t> token_wasm() {
		return read_wasm("${CMAKE_SOURCE_DIR}/eosio.token/eosio.token.wasm");
	}
	static std::vector<char> token_abi() {
		return read_abi("${CMAKE_SOURCE_DIR}/eosio.token/eosio.token.abi");
	}

	static std::vector<uint8_t> badtoken_wasm() {
		return read_wasm("${CMAKE_SOURCE_DIR}/badtoken/badtoken.wasm"); // TODO: needs badtoken compiled
	}
	static std::vector<char> badtoken_abi() {
		return read_abi("${CMAKE_SOURCE_DIR}/badtoken/badtoken.abi"); // TODO: needs badtoken compiled
	}

	static std::vector<uint8_t> evolutiondex_wasm() {
		return read_wasm("${CMAKE_BINARY_DIR}/../evolutiondex/evolutiondex.wasm");
	}
	static std::vector<char> evolutiondex_abi() {
		return read_abi("${CMAKE_BINARY_DIR}/../evolutiondex/evolutiondex.abi");
	}

	static std::vector<uint8_t> wevotethefee_wasm() {
		return read_wasm("${CMAKE_BINARY_DIR}/../wevotethefee/wevotethefee.wasm");
	}
	static std::vector<char> wevotethefee_abi() {
		return read_abi("${CMAKE_BINARY_DIR}/../wevotethefee/wevotethefee.abi");
	}
};
} // namespace testing
} // namespace eosio